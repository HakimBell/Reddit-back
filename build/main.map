{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/controllers/postController.js","webpack:///./src/controllers/subRedditController.js","webpack:///./src/controllers/userController.js","webpack:///./src/index.js","webpack:///./src/models/postModel.js","webpack:///./src/models/subRedditModel.js","webpack:///./src/models/userModel.js","webpack:///./src/routes/postRoutes.js","webpack:///./src/routes/subRedditRoutes.js","webpack:///./src/routes/userRoutes.js","webpack:///external \"bcryptjs\"","webpack:///external \"cors\"","webpack:///external \"dotenv/config\"","webpack:///external \"express\"","webpack:///external \"mongoose\""],"names":["createPost","req","res","title","content","body","newPost","Post","save","json","error","message","getAllPost","allPosts","find","deletePost","findByIdAndDelete","params","id","addPostSubreddit","findById","id_post","subReddit","SubReddit","id_subreddit","posts","push","createSubReddit","description","newSubReddit","getAllSubReddits","allSubReddits","getsubRedditById","oneSubreddit","deleteSubreddit","findOneAndDelete","deletePostSubreddit","postId","subRedditId","findByIdAndUpdate","$pull","new","inscription","newUser","User","create","password","encryptPassword","login","email","user","findOne","select","Error","validPassword","console","log","app","express","port","process","env","PORT","main","catch","err","mongoose","connect","MONGODB_URI","use","cors","urlencoded","extended","get","send","userRouter","subRedditRouter","postRouter","listen","postSchema","Schema","type","String","required","comments","Types","ObjectId","ref","model","subRedditSchema","userSchema","unique","minlength","methods","salt","bcrypt","genSalt","hash","applicantPassword","oldPassword","result","compare","require","Router","post","delete"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import Post from \"../models/postModel\";\nimport SubReddit from \"../models/subRedditModel\";\n\nconst createPost = async (req, res) => {\n  try {\n    const { title, content } = req.body;\n    const newPost = await new Post({ title, content });\n    newPost.save();\n    res.json(newPost);\n    res.json(\"Post créé avec succés\");\n  } catch (error) {\n    res.json(error.message);\n  }\n};\n\nconst getAllPost = async (req, res) => {\n  try {\n    const allPosts = await Post.find();\n    res.json(allPosts);\n    res.json(\"Voici tous les posts \");\n  } catch (error) {\n    res.json(error.message);\n  }\n};\n\nconst deletePost = async (req, res) => {\n  try {\n    const deletePost = await Post.findByIdAndDelete(req.params.id);\n    if (!deletePost) {\n      res.json({ message: \"Post not found\" });\n    }\n    res.json({ message: \"Post deleted\" });\n  } catch (error) {\n    res.json({ error: error.message });\n  }\n};\n\nconst addPostSubreddit = async (req, res) => {\n  try {\n    const newPost = await Post.findById(req.params.id_post);\n\n    const subReddit = await SubReddit.findById(req.params.id_subreddit);\n\n    subReddit.posts.push(newPost);\n    subReddit.save();\n    res.json(subReddit);\n  } catch (error) {\n    res.json(error.message);\n  }\n};\n\nexport { createPost, getAllPost, addPostSubreddit, deletePost };\n","import SubReddit from \"../models/subRedditModel\";\nimport Post from \"../models/postModel\";\n\nconst createSubReddit = async (req, res) => {\n  const { title, description } = req.body;\n  try {\n    const newSubReddit = await new SubReddit({ title, description });\n    newSubReddit.save();\n    res.json(newSubReddit);\n  } catch (error) {\n    res.json({ error: error.message });\n  }\n};\n\nconst getAllSubReddits = async (req, res) => {\n  try {\n    const allSubReddits = await SubReddit.find();\n    res.json(allSubReddits);\n  } catch (error) {\n    res.json({ error: error.message });\n  }\n};\n\nconst getsubRedditById = async (req, res) => {\n  try {\n    const oneSubreddit = await SubReddit.findById(req.params.id);\n    if (!oneSubreddit) {\n      res.json({ message: \" subreddit not found !\" });\n    }\n    res.json(oneSubreddit);\n  } catch (error) {\n    res.json({ error: error.message });\n  }\n};\n\nconst deleteSubreddit = async (req, res) => {\n  const { id } = req.params;\n  try {\n    const deleteSubreddit = await SubReddit.findOneAndDelete(id);\n    if (!deleteSubreddit) {\n      return res.json({ error: \"Subreddit pas trouvé\" });\n    }\n    // res.json(deleteSubreddit);\n    res.json({ message: \"Subreddit deleted successfully\" });\n  } catch (error) {\n    res.json({ error: error.message });\n  }\n};\n\nconst deletePostSubreddit = async (req, res) => {\n  try {\n    const postId = req.params.id_post;\n    const subRedditId = req.params.id_subreddit;\n\n    const subReddit = await SubReddit.findByIdAndUpdate(\n      subRedditId,\n      { $pull: { posts: postId } },\n      { new: true }\n    );\n\n    res.json(subReddit);\n  } catch (error) {\n    res.json(error.message);\n  }\n};\nexport {\n  createSubReddit,\n  getAllSubReddits,\n  getsubRedditById,\n  deleteSubreddit,\n  deletePostSubreddit,\n};\n","import User from \"../models/userModel\";\n\nconst inscription = async (req, res) => {\n  try {\n    const newUser = await User.create(req.body);\n    newUser.password = await newUser.encryptPassword(req.body.password);\n    newUser.save();\n    res.json(newUser);\n  } catch (error) {\n    res.json({ error: error.message });\n  }\n};\n\nconst login = async (req, res) => {\n  try {\n    const email = req.body.email;\n    const user = await User.findOne({ email }).select(\"+password\");\n    if (!user) {\n      const error = new Error(\"Invalid user\");\n      throw error;\n    }\n    const validPassword = await user.validPassword(\n      req.body.password,\n      user.password\n    );\n    console.log(\"Password from request:\", req.body.password);\n    console.log(\"Password from database:\", user.password);\n    if (!validPassword) {\n      const error = new Error(\"Invalid password\");\n      throw error;\n    }\n    res.json({ user, message: \"Vous êtes bien connécté\" });\n  } catch (error) {\n    console.error(error.message);\n  }\n};\n\nexport { inscription, login };\n","import express from \"express\";\nimport \"dotenv/config\";\nimport cors from \"cors\";\nimport mongoose from \"mongoose\";\nimport userRouter from \"./routes/userRoutes\";\nimport subRedditRouter from \"./routes/subRedditRoutes\";\nimport postRouter from \"./routes/postRoutes\";\n\nconst app = express();\nconst port = process.env.PORT;\n\nmain().catch((err) => console.log(err));\n\nasync function main() {\n  await mongoose.connect(process.env.MONGODB_URI);\n  console.log(`[DATABASE] MongoDB is Connected`);\n}\n\n// Utilisation de middleware pour traiter les données JSON dans les requêtes\napp.use(cors());\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.get(\"/\", (req, res) => res.send(\"SALUT HAKIM DADDY MICHELIN\"));\napp.use(\"/auth\", userRouter);\napp.use(\"/subreddit\", subRedditRouter);\napp.use(\"/post\", postRouter);\n\napp.listen(port, () =>\n  console.log(`[SERVER] listening at http://localhost:${port}`)\n);\n","import { mongoose, Schema } from \"mongoose\";\n\nconst postSchema = new Schema({\n  title: { type: String, required: true },\n  content: String,\n  // user: [{ type: mongoose.Schema.Types.ObjectId, ref: \"User\" }],\n  comments: [{ type: mongoose.Schema.Types.ObjectId, ref: \"Comment\" }],\n});\n\nconst Post = mongoose.model(\"Post\", postSchema);\n\nexport default Post;\n","import { mongoose, Schema } from \"mongoose\";\n\nconst subRedditSchema = new Schema({\n  title: String,\n  description: String,\n  posts: [{ type: Schema.Types.ObjectId, ref: \"Post\" }],\n});\n\nconst SubReddit = mongoose.model(\"SubReddit\", subRedditSchema);\n\nexport default SubReddit;\n","import mongoose from \"mongoose\";\nimport bcrypt from \"bcryptjs\";\nimport { Schema } from \"mongoose\";\n\nconst userSchema = new Schema({\n  email: { type: String, unique: true },\n  password: { type: String, minlength: 5 },\n});\n\n// Un petit peu de sel de guérande\nuserSchema.methods.encryptPassword = async (password) => {\n  const salt = await bcrypt.genSalt(8);\n  const hash = await bcrypt.hash(password, salt);\n  return hash;\n};\n\nuserSchema.methods.validPassword = async (applicantPassword, oldPassword) => {\n  const result = await bcrypt.compare(applicantPassword, oldPassword);\n  return result;\n};\nconst User = mongoose.model(\"User\", userSchema);\n\nexport default User;\n","import {\n  addPostSubreddit,\n  createPost,\n  deletePost,\n  getAllPost,\n} from \"../controllers/postController\";\n\nconst postRouter = require(\"express\").Router();\n\npostRouter.post(\"/submitpost\", createPost);\npostRouter.post(\"/allPosts\", getAllPost);\npostRouter.post(\"/:id_subreddit/addpostsubreddit/:id_post\", addPostSubreddit);\npostRouter.delete(\"/deletePost/:id\", deletePost);\n\nexport default postRouter;\n","import {\n  createSubReddit,\n  deletePostSubreddit,\n  deleteSubreddit,\n  getAllSubReddits,\n  getsubRedditById,\n} from \"../controllers/subRedditController\";\n\nconst subRedditRouter = require(\"express\").Router();\n\nsubRedditRouter.post(\"/newSubReddit\", createSubReddit);\nsubRedditRouter.get(\"/allSubReddits\", getAllSubReddits);\nsubRedditRouter.get(\"/:id\", getsubRedditById);\nsubRedditRouter.delete(\"/:id/clean\", deleteSubreddit);\nsubRedditRouter.delete(\n  \"/:id_subreddit/delete-post-subreddit/:id_post\",\n  deletePostSubreddit\n);\n\nexport default subRedditRouter;\n","import { inscription, login } from \"../controllers/userController\";\nconst userRouter = require(\"express\").Router();\n\nuserRouter.post(\"/inscription\", inscription);\nuserRouter.post(\"/login\", login);\n\nexport default userRouter;\n","module.exports = require(\"bcryptjs\");","module.exports = require(\"cors\");","module.exports = require(\"dotenv/config\");","module.exports = require(\"express\");","module.exports = require(\"mongoose\");"],"sourceRoot":""}